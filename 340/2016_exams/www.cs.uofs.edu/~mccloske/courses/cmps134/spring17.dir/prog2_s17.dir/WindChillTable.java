/* WindChill.java
** CMPS 134 - Spring 2017 - Prog. Assg. #2
** Author: R. McCloskey
** Aided by: ...
** Known Flaws: ...
** Last Modified: February 2017
**
** Java application that produces a table of wind chill factors. 
** Each row shows the wind chill factors for a particular temperature
** and a range of wind velocities beginning at 5MPH and going up to
** 60MPH, with gaps of 5MPH between them.
** Both the range of temperatures to be represented in the table and
** the gap between successive temperatures are provided by the user in
** response to prompts generated by the program.  
** Temperature values are on the Fahrenheit scale.
*/

import java.util.Scanner;   // For reading input data from keyboard
import java.lang.Math;      // For computing a number raised to a power


public class WindChillTable {

   // Class symbolic constants
   final static int MIN_V = 5;   // minimum wind velocity
   final static int MAX_V = 60;  // maximum wind velocity
   final static int V_GAP = 5;   // gap between successive wind velocities

   final static char DELIMITER = '|';   // printed after temperature in each row

   public static void main(String[] args) {    

      // Establishes a Scanner object that can read data entered at keyboard
      Scanner keyboard = new Scanner(System.in);
      
      // For each of the three inputs, prompt the user and assign the
      // response to a variable:

      // First get the bottom (lower bound) temperature.
      System.out.print("Enter bottom temperature:");
      int bottomTemp = keyboard.nextInt();

      // Then get the top (upper bound) temperature.
      System.out.print("Enter top temperature:");
      int topTemp = keyboard.nextInt();

      // Finally get the gap between successive temperatures.
      System.out.print("Enter gap between temperatures:");
      int tempGap = keyboard.nextInt();
      
      System.out.println();   // So that a blank line appears above the table
      printColumnHeadings();  // print column headings of the table
      
      // Print the body of the table.
      for(int temp = bottomTemp; temp <= topTemp; temp = temp + tempGap)
      {
         printRow(temp);  System.out.println();
      }
   }

   /* Prints one row of the table, namely the one reporting the wind chill
   ** factors for the specified temperature (i.e., fTemp).
   */
   private static void printRow(int fTemp)
   {
      System.out.printf("%3d  |", fTemp);
      for (int windVel = MIN_V; windVel <= MAX_V; windVel = windVel + V_GAP) {
         System.out.printf("%6.1f", WCF(fTemp, windVel));
      }
   }

   /* Returns the Wind Chill Factor corresponding to the specified
   ** temperature (in Fahrenheit) and wind velocity (in miles per hour).
   ** The formula is taken from the National Weather Service's web site, at
   ** http://www.nws.noaa.gov/om/winter/windchill-images/windchillchart3.pdf
   */
   private static double WCF(int fahTemp, int windVelocity)
   {
      double wv = Math.pow(windVelocity, 0.16); // needed twice in formula
      return  35.74 + (0.6215 * fahTemp) - (35.75 * wv) + (0.4275 * fahTemp * wv);
   }


   /* Prints column headings for the table.  It is assumed that, in each row,
   ** the temperature value will be printed in a field of width 5, followed by
   ** the DELIMITER character, followed by a sequence of wind chill factors, 
   ** each occupying a field of width 6.
   */
   private static void printColumnHeadings() {
      System.out.println("                        W i n d   V e l o c i t y");
      System.out.println();
      System.out.print("Temp " + DELIMITER);
      for (int w = MIN_V; w <= MAX_V; w = w + V_GAP) {
         System.out.printf("%6d", w);
      }
      System.out.println();
      System.out.print("-----" + DELIMITER);
      for (int w = MIN_V; w <= MAX_V; w = w + V_GAP) {
         System.out.print("------");
      }
      System.out.println();
   }
}
