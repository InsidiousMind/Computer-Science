/* WindChill.java
** CMPS 134 - Spring 2017 - Prog. Assg. #2
** Author: R. McCloskey and < YOUR NAME >
** Aided by: ...
** Known Flaws: ...
** Last Modified: February 2017
**
** Java application that produces a table of wind chill factors. 
** Each row shows the wind chill factors for a particular temperature
** and a range of wind velocities beginning at 5MPH and going up to
** 60MPH, with gaps of 5MPH between them.
** Both the range of temperatures to be represented in the table and
** the gap between successive temperatures are provided by the user in
** response to prompts generated by the program.  
** Temperature values are on the Fahrenheit scale.
*/

import java.util.Scanner;   // For reading input data from keyboard
import java.lang.Math;      // For computing a number raised to a power


public class WindChillTable {

   // Symbolic constants representing the minimum and maximum wind velocities
   // of interest and the gap between successive wind velocities to be 
   // reported upon.
   private final static int MIN_VEL = 5;   // minimum wind velocity
   private final static int MAX_VEL = 60;  // maximum wind velocity
   private final static int VEL_GAP = 5;   // gap between wind velocities

   // Serves to separate each row header from the values in the row.
   priviate final static char DELIMITER = '|';


   public static void main(String[] args) {    

      // Establishes a Scanner object that can read data entered at keyboard
      Scanner keyboard = new Scanner(System.in);
      
      // For each of the three inputs, prompt the user and assign the
      // response to a variable:

      // First get the bottom (lower bound) temperature.
      System.out.print("Enter bottom temperature:");
      int bottomTemp = keyboard.nextInt();

      // Then get the top (upper bound) temperature.
      System.out.print("Enter top temperature:");
      int topTemp = keyboard.nextInt();

      // Finally get the gap between successive temperatures.
      System.out.print("Enter gap between temperatures:");
      int tempGap = keyboard.nextInt();
      
      System.out.println();   // So that a blank line appears above the table
      printColumnHeadings();  // print column headings of the table
      
      // ------------------------------------------------
      // Here insert code to print the body of the table.
      // ------------------------------------------------

   }


   /* Prints one row of the table, namely the one in which appears the
   ** wind chill factors for the specified temperature (i.e., fTemp).
   */
   private static void printRow(int fTemp)
   {
      // !STUB
   }


   /* Given a temperature on the Fahrenheit scale and a wind velocity
   ** measured in miles per hour, returns the corresponding wind chill factor.
   */
   private static double WCF(int fahTemp, int windVelocity) {
      return 0.0;   // STUB!!
   }


   /* Prints column headings for the table.  It is assumed that, in each row, 
   ** the temperature value will be printed in a field of width 5, followed by
   ** the DELIMITER character, followed by a sequence of wind chill factors, 
   ** each occupying a field of width 6. 
   */
   private static void printColumnHeadings()
   {
      System.out.println("                        W i n d   V e l o c i t y");
      System.out.println();
      System.out.print("Temp " + DELIMITER);

      // ------------------------------------------------------------
      // Here insert code to print the column headings, which are the
      // wind velocities MIN_VEL through MAX_VEL with gaps of VEL_GAP.
      // ------------------------------------------------------------

      System.out.println();
      System.out.print("-----" + DELIMITER);

      // -------------------------------------------------------------
      // Here insert code to print the correct number of dashes, which
      // depends upon how many columns are in the table (one for each
      // distinct wind velocity of interest).
      // -------------------------------------------------------------

      System.out.println();
   }

}
