;-------------------------
;BuildLst()
;------------------------
;---Local Variables----
size:      .BLOCK    2         ; size
head:      .BLOCK    2
stringrf:  .BLOCK    2         ;the addr of the str from readSo
next:      .BLOCK    2         ;the addr where we can start putting stuff in the heap
node:      .BLOCK    2
;----------------------


buildLst:  NOP0
           SAVEA
           SAVEX
           CLRA
           CLRX
           STA       size,d

loop:      NOP0
           CLRA
           CALL      readSO    ; calling readSO to read the string
           STA       stringrf,d  ;storing the reference to the String into temp
;------------------------------
           CPA       0,i        ; if readSo returns 0 we are done
           BREQ      done
;-------------------------------
           LDA       4,i    ;length of 4 bytes
           STA       -2,s
           SUBSP     2,i
           CALL      new
           ADDSP     2,i
           STA       node,d  ; storing the ref from new into node
;-----------------------------; this is the place in the stack we will be using
           LDA       size,d    ;Loading size into A
           TSTA                ;testing against 0
           BREQ      first     ;if it's the first element, branch to first
           LDA       node,d
           STA       next,n    ;store the ref to current node in next for the prev node
           MOVE      node,d,next,d
           ADD       next,d,2,i
           LDA       0,i
           STA       next,n
           BR        insert
;-----------------------------
back:      LDA       stringrf,d  ;store string in first node cell
           STA       node,n
;-----------------------------          ;make ref cell just 0
           MOVE      node,d,next,d      ;LDA    node,d  STA next,d
           ADD       next,d,2,i
           LDA       0,i
           STA       next,n
           INC       size,d
;-----------------------------
           BR        loop

first:     MOVE     node,d,head,d
           BR        back


;--------------------------------------------------------
;-------Insertion Sort-----------------------------------
;--------------------------------------------------------
;Local Vars
;-----------------------------
htemp:      .BLOCK   2
htnext:     .BLOCK   2
iNode:      .BLOCK   2
iNodeNx:    .BLOCK   2
sRfTemp:    .BLOCK   2
currSr:     .BLOCK   2
nexSr:      .BLOCK   2
prev:       .BLOCk   2
;-----------------------------
insert:    MOVE   node,d,iNode,d    ;next node of curr node
           MOVE   node,d,iNodeNx,d
           ADD    iNodeNx,d,2,i
           MOVE   head,d,htemp,d    ;>
;------------------------------ getting the addresses
           MOVE   htemp,d,htnext,d    ;>     ;next node of head
           ADD    htnext,d,2,i        ;>
;--------------------------------
           MOVE   htemp,n,currSr,d  ;must do first element first

           CLRA
           PUSH   stringrf,d        ;>
           PUSH   currSr,d          ;>
           CALL   ScompTo
           ADDSP  4,i
           CPA    0,i
           BREQ   equal
           BRLT   less
           BRGT   greatr2

;-------------------------------
iloop:     LDA    htnext,n           ;?
           CPA    0,i               ;>
           BREQ   back              ;>
;------------------------------------checks if next addr is null
           MOVE   htnext,n,nexSr,d
           PUSH   currSr,d          ;>
           PUSH   nexSr,n          ;>
           CALL   ScompTo           ;>
           ADDSP  4,i
           CPA    0,i               ;>
           BRLT   less              ;>
           BRGT   egreater           ;>

less:      NOP0
           MOVE   htemp,d,prev,d    ;move curr into prev
           MOVE   htnext,n,htemp,d   ;>
           MOVE   htemp,d,htnext,d   ;>
           ADD    htnext,d,2,i       ;>
           LDA    htnext,n
           CPA    0,i
           BREQ   mv2Org
           MOVE   htemp,n,currSr,d
           BR     iloop

egreater:   NOP0
           MOVE     stringrf,d,iNode,n
           MOVE     htemp,d,iNodeNx,n
           LDA      prev,d
           ADD      prev,d,2,i
           MOVE     iNode,d,prev,n  ;move current into previous
           BR       loop

greatr2:   NOP0
           LDA      stringrf,d
           STA      iNode,n
           MOVE     htemp,d,iNodeNx,n
           MOVE     htemp,d,head,d
           BR       loop

mv2Org:    NOP0
           MOVE     htemp,d,node,d
           MOVE     htnext,d,next,d
           BR       back

done:      LDA       head,d
           RET0
